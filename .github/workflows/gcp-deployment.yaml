name: Build and Deploy to GCE VM

on:
  push:
    branches:
      - 'main'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCE_INSTANCE: ${{ secrets.GCE_INSTANCE_NAME }}
  GCE_ZONE: ${{ secrets.GCE_ZONE }}
  ARTIFACT_REPO: budgetmanager
  SERVICE_NAME: budgetmanager-be
  REGION: asia-southeast2

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG -f Dockerfile.app .

      - name: Push Docker image
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "Pushing image: $IMAGE_TAG"
          docker push $IMAGE_TAG

      - name: Deploy to GCE VM using OS Login
        uses: 'google-github-actions/ssh-compute@v1'
        with:
          instance_name: ${{ env.GCE_INSTANCE }}
          zone: ${{ env.GCE_ZONE }}
          command: |
            set -e
            
            echo "Starting deployment process..."
            
            # Navigate to application directory
            cd /home/$USER/app
            
            # Verify current directory and files
            pwd
            ls -la
            
            # Update docker-compose.yml with new image tag
            IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
            echo "Updating docker-compose.yml with image: $IMAGE_TAG"
            
            # Backup current docker-compose.yml
            cp docker-compose.yml docker-compose.yml.backup
            
            # Update the image tag
            sed -i "/go-backend:/,/image:/s|image:.*|image: $IMAGE_TAG|" docker-compose.yml
            
            # Verify the change
            echo "Updated docker-compose.yml:"
            grep -A 5 "go-backend:" docker-compose.yml || true
            
            # Authenticate Docker on the VM
            echo "Configuring Docker authentication..."
            gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
            
            # Pull the new image
            echo "Pulling new image..."
            docker-compose pull go-backend
            
            # Deploy the updated service
            echo "Deploying updated service..."
            docker-compose up -d --no-deps go-backend
            
            # Verify deployment
            echo "Verifying deployment..."
            docker-compose ps go-backend
            
            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -af
            
            echo "Deployment completed successfully!"

      - name: Verify deployment status
        if: success()
        run: |
          echo "âœ… Deployment completed successfully"
          echo "ðŸ“¦ Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"